{"version":3,"sources":["Overview.jsx","Header.jsx","ReactIdeogram.jsx","IdeogramHuman.jsx","serviceWorker.js","index.js","App.jsx"],"names":["Overview","className","Component","prevNextLinks","Summary","props","human","href","page","getPrevNextIndex","pageIndex","prevOrNext","numPages","length","Header","this","indexOf","prevIndex","nextIndex","getPrevNextPages","prevPage","nextPage","to","target","ReactIdeogram","Ideogram","organism","dataDir","container","id","IdeogramHuman","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAIqBA,E,iLAEjB,OACE,yBAAKC,UAAU,OAAf,qE,GAHgCC,a,QCChCC,EAAgB,CACpB,QACA,QACA,qBAGIC,EAAU,SAACC,GAoBf,MAnBkB,CAChBC,MACE,6BACE,wHAEY,IACZ,uBAAGC,KAAK,iDAAR,mBAHA,4CAIwC,IACxC,uBAAGA,KAAK,4CAAR,cALA,+CAOA,wEAC2C,IAC3C,uBAAGA,KAAK,wCAAR,WAFA,cAEsE,IAFtE,4EAG0E,IAH1E,OAII,uBAAGA,KAAK,gBAAR,iBAJJ,QAIkD,IAClD,uBAAGA,KAAK,iBAAR,kBALA,OASWF,EAAMG,OAGzB,SAASC,EAAiBC,EAAWC,GACnC,IAAMC,EAAWF,EAAUG,OAC3B,OAAkB,IAAdH,GAAkC,SAAfC,EACdC,EAAW,EACTF,IAAcE,GAA2B,SAAfD,EAC5B,EACiB,SAAfA,EACFD,EAAY,EACK,SAAfC,EACFD,EAAY,OADd,E,IAmBYI,E,iLAGjB,IAAMN,EAAOO,KAAKV,MAAMG,KADjB,EAVX,SAA0BA,GACxB,IAAME,EAAYP,EAAca,QAAQR,GAClCS,EAAYR,EAAiBC,EAAW,QACxCQ,EAAYT,EAAiBC,EAAW,QAE9C,MAAO,CAACP,EAAcc,GAAYd,EAAce,IAOjBC,CAAiBX,GAAvCY,EAFA,EAEAA,SAAUC,EAFV,EAEUA,SACjB,OACE,gCACA,gDACA,uBAAGd,KAAK,aAAR,YAFA,MAEoC,IACpC,kBAAC,IAAD,CAAMe,GAAIF,GAAV,YAHA,OAGyC,IACzC,kBAAC,IAAD,CAAME,GAAID,GAAV,QAJA,OAIqC,IACrC,uBAAGd,KAAK,qEAAqEgB,OAAO,UAApF,UALA,IAKyG,IACzG,kBAAC,EAAD,CAASf,KAAMA,S,GAZeN,a,QCzDfsB,E,4LAGjB,OAAO,IAAIC,IAAS,CAClBC,SAAUX,KAAKV,MAAMqB,SACrBC,QAAS,4DACTC,UAAW,sB,+BAKb,OACE,yBAAKC,GAAG,uB,GAZ6B3B,aCAtB4B,E,iLAEjB,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,CAAQO,KAAK,UACb,kBAAC,EAAD,CAAekB,SAAS,e,GALWxB,a,gBCQvB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCMD,WACb,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMf,GAAG,KAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAUN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SAASC,UAAWV,SD9B1B,MAASW,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c4a39713.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import Header from './Header';\n// import ReactIdeogram from './ReactIdeogram';\n\nexport default class Overview extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        This will show cards as in https://eweitz.github.io/ideogram.\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {\n  Link\n} from 'react-router-dom';\n\nconst prevNextLinks = [\n  'human',\n  'mouse',\n  'multiple-primates'\n];\n\nconst Summary = (props) => {\n  const summaries = {\n    human:\n      <div>\n        <p>\n        A human genome is depicted below.  The grey and black bands in each chromosome \n        represent  {' '}\n        <a href=\"https://en.wikipedia.org/wiki/Heterochromatin\">heterochromatin</a>.\n        The pink region is the area around the {' '}\n        <a href=\"https://en.wikipedia.org/wiki/Centromere\">centromere</a>, and the blue represents variable regions.\n        </p>\n        <p>\n        This ideogram shows most chromosomes in a {' '}\n        <a href=\"https://en.wikipedia.org/wiki/Ploidy\">haploid</a> state for {' '}\n        simplicity.  For more accurate, diploid representation of human genomes, {' '}\n        see <a href=\"ploidy-basic\">Ploidy, basic</a> and {' '}\n        <a href=\"multiple-trio\">Multiple, trio</a>.\n        </p>\n      </div>\n  };\n  return summaries[props.page];\n}\n\nfunction getPrevNextIndex(pageIndex, prevOrNext) {\n  const numPages = pageIndex.length;\n  if (pageIndex === 0 && prevOrNext === 'prev') {\n    return numPages - 1;\n  } else if (pageIndex === numPages && prevOrNext === 'next') {\n    return 0;\n  } else if (prevOrNext === 'next') {\n    return pageIndex + 1;\n  } else if (prevOrNext === 'prev') {\n    return pageIndex - 1;\n  }\n}\n\n/**\n * Gets names of previous and next pages, used in header navigation links\n * \n * @param {String} page Name of page in slug form, e.g. 'human', 'multiple-primates'\n * @return {Array} Names of previous and next pages\n */\nfunction getPrevNextPages(page) {\n  const pageIndex = prevNextLinks.indexOf(page)\n  const prevIndex = getPrevNextIndex(pageIndex, 'prev');\n  const nextIndex = getPrevNextIndex(pageIndex, 'next');\n\n  return [prevNextLinks[prevIndex], prevNextLinks[nextIndex]];\n}\n\nexport default class Header extends Component {\n\n  render() {\n    const page = this.props.page;\n    const {prevPage, nextPage} = getPrevNextPages(page);\n    return (\n      <header>\n      <h1>Human | Ideogram</h1>\n      <a href=\"/ideogram\">Overview</a> | {' '}\n      <Link to={prevPage} >Previous</Link> |  {' '}\n      <Link to={nextPage} >Next</Link> |  {' '}\n      <a href=\"https://github.com/eweitz/ideogram-react/blob/gh-pages/{page}.html\" target=\"_blank\">Source</a> {' '}\n      <Summary page={page}/>\n      </header>\n    )\n  }\n};","import React, { Component } from 'react';\n\nimport Ideogram from 'ideogram';\n\nexport default class ReactIdeogram extends Component {\n\n  componentDidMount() {\n    return new Ideogram({\n      organism: this.props.organism,\n      dataDir: 'https://unpkg.com/ideogram@1.16.0/dist/data/bands/native/',\n      container: '#ideo-container'\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"ideo-container\"></div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Header from './Header';\nimport ReactIdeogram from './ReactIdeogram';\n\nexport default class IdeogramHuman extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header page='human'/>\n        <ReactIdeogram organism='human'/>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Overview from './Overview';\nimport IdeogramHuman from './IdeogramHuman';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Overview</Link>\n            </li>\n            <li>\n              <Link to=\"/human\">Human</Link>\n            </li>\n            {/* <li>\n              <Link to=\"/Eukaryotes\">Eukaryotes</Link>\n            </li> */}\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Overview />\n          </Route>\n          <Route path=\"/human\" component={IdeogramHuman} />\n          {/* <Route path=\"/Eukaryotes\">\n            <Eukaryotes />\n          </Route> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}"],"sourceRoot":""}